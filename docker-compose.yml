# Use postgres/example user/password credentials
version: '3.1'

# NB PGSQL clustering with swarm: https://info.crunchydata.com/blog/an-easy-recipe-for-creating-a-postgresql-cluster-with-docker-swarm

services:
  db:
    image: postgres
    restart: always
    environment:
      # Default superuser
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      # Default superuser password
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      # Default database created when image first started
      POSTGRES_DB: rseadmin
      #PGDATA: defaults to /var/lib/postgresql/data
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - ./docker/initdb.sh:/docker-entrypoint-initdb.d/00-initdb.sh:r
      #  - ./pgdata:/var/lib/postgresql/data
  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
  app:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      args:
        SECRET_KEY: ${SECRET_KEY:-changeme}
    environment:
      SECRET_KEY: ${SECRET_KEY:-changeme}
    depends_on:
      - db
  proxy:
    image: nginx
    volumes:
     - ./mysite.template:/etc/nginx/conf.d/mysite.template
    ports:
     - "8080:80"
    environment:
     - NGINX_HOST=foobar.com
     - NGINX_PORT=80
    command: /bin/bash -c "envsubst < /etc/nginx/conf.d/mysite.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    depends_on:
      - app
